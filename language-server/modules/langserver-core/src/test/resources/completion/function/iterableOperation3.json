{
  "position": {
    "line": 2,
    "character": 11
  },
  "source": "function/source/iterableOperation3.bal",
  "items": [
    {
      "label": "forEach(function (xml:ItemType) returns () func)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nApplies a function to each item in an xml sequence.\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function (xml:ItemType) returns ()` func: a function to apply to each item in `x`  \n  \n**Returns** `()`   \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "forEach(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "length()(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nReturns number of xml items in `x`.\n  \n  \n  \n**Returns** `int`   \n- number of XML items in `x`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "length()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cloneReadOnly()(anydata)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:_  \n  \nReturns a clone of `v` that is read-only, i.e. immutable.\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n  \n**Returns** `anydata`   \n- immutable clone of `v`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "cloneReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "concat(xml|string... xs)(xml)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nConcatenates xml and string values.\n  \n  \n  \n**Returns** `xml`   \n- an xml sequence that is the concatenation of all the `xs`;  \n   an empty xml sequence if the `xs` are empty  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "concat(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "filter(function (xml:ItemType) returns boolean func)(xml)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nSelects the items from an xml sequence for which a function returns true.\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function (xml:ItemType) returns boolean` func: a predicate to apply to each item to test whether it should be selected  \n  \n**Returns** `xml`   \n- new xml sequence containing items in `x` for which `func` evaluates to true  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "iterator()( object {})",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nReturns an iterator over the xml items of `x`\n  \n  \n  \n**Returns** ` object {}`   \n- iterator object  \nEach item is represented by an xml singleton.  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "iterator()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isReadOnly()(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:_  \n  \nTests whether `v` is read-only, i.e. immutable\nReturns true if read-only, false otherwise.\n  \n  \n  \n**Returns** `boolean`   \n- true if read-only, false otherwise  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "isReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "strip()(xml)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nStrips the insignificant parts of the an xml value.\nComment items, processing instruction items are considered insignificant.\nAfter removal of comments and processing instructions, the text is grouped into\nthe biggest possible chunks (i.e. only elements cause division into multiple chunks)\nand a chunk is considered insignificant if the entire chunk is whitespace.\n  \n  \n  \n**Returns** `xml`   \n- `x` with insignificant parts removed  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "strip()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "slice(int startIndex, int endIndex)(xml)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nReturns a subsequence of an xml value.\n  \n**Params**  \n- `int` startIndex: start index, inclusive  \n- `int` endIndex: end index, exclusive(Defaultable)  \n  \n**Returns** `xml`   \n- a subsequence of `x` consisting of items with index >= startIndex and < endIndex  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "slice(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "elements()(xml)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nSelects the elements from an xml value.\n  \n  \n  \n**Returns** `xml`   \n- an xml sequence consisting of all the element items in `x`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "elements()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "get(int i)(xml)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nReturns the item of `x` with index `i`.\nThis differs from `x[i]` in that it panics if\n`x` does not have an item with index `i`.\n  \n**Params**  \n- `int` i: the index  \n  \n**Returns** `xml`   \n- the item with index `i` in `x`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "get(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "clone()(anydata)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:_  \n  \nReturns a clone of `v`.\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n  \n**Returns** `anydata`   \n- clone of `v`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "clone()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:_  \n  \nPerforms a minimal conversion of a value to a string.\nThe conversion is minimal in particular in the sense\nthat the conversion applied to a value that is already\na string does nothing.  \n  \n  \n**Returns** `string`   \n- a string resulting from the conversion  \n  \nThe result of `toString(v)` is as follows:  \n  \n- if `v` is a string, then returns `v`  \n- if `v` is `()`, then returns an empty string  \n- if `v` is boolean, then the string `true` or `false`  \n- if `v` is an int, then return `v` represented as a decimal string  \n- if `v` is a float or decimal, then return `v` represented as a decimal string,  \n  with a decimal point only if necessary, but without any suffix indicating the type of `v`;  \n  return `NaN`, `Infinity` for positive infinity, and `-Infinity` for negative infinity  \n- if `v` is a list, then returns the results toString on each member of the list  \n  separated by a space character  \n- if `v` is a map, then returns key=value for each member separated by a space character  \n- if `v` is xml, then returns `v` in XML format (as if it occurred within an XML element)  \n- if `v` is table, TBD  \n- if `v` is an error, then a string consisting of the following in order  \n    1. the string `error`  \n    2. a space character  \n    3. the reason string  \n    4. if the detail record is non-empty  \n        1. a space character  \n        2. the result of calling toString on the detail record  \n- if `v` is an object, then  \n    - if `v` provides a `toString` method with a string return type and no required methods,  \n      then the result of calling that method on `v`  \n    - otherwise, `object` followed by some implementation-dependent string  \n- if `v` is any other behavioral type, then the identifier for the behavioral type  \n  (`function`, `future`, `service`, `typedesc` or `handle`)  \n  followed by some implementation-dependent string  \n  \nNote that `toString` may produce the same string for two Ballerina values  \nthat are not equal (in the sense of the `==` operator).  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "map(function (xml:ItemType) returns xml func)(xml)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:_  \n  \nApplies a function to each item in an xml sequence, and returns an xml sequence of the results.\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function (xml:ItemType) returns xml` func: a function to apply to each child or `item`  \n  \n**Returns** `xml`   \n- new xml value containing result of applying `func` to each child or `item`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
